{
	// Place your competitive_programming workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Author CPP": {
		"scope": "cpp",
		"prefix": "author",
		"body": [
			"/*=============================================================================",
			"#  Author:          ${1:Teerapat Jenrungrot - https://github.com/mjenrungrot/}",
			"#  FileName:        ${2:$TM_FILENAME}",
			"#  Description:     ${3:${TM_DIRECTORY/^.+\\/(.*)$/$1/} - $TM_FILENAME_BASE}",
			"=============================================================================*/"
		  ],
		"description": "File info"
	},
	"Author Python": {
		"scope": "python",
		"prefix": "author",
		"body": [
			"# =============================================================================",
			"#  Author:          ${1:Teerapat Jenrungrot - https://github.com/mjenrungrot/}",
			"#  FileName:        ${2:$TM_FILENAME}",
			"#  Description:     ${3:${TM_DIRECTORY/^.+\\/(.*)$/$1/} - $TM_FILENAME_BASE}",
			"# ============================================================================="
		  ],
		"description": "File info"
	},
	"cpp": {
		"scope": "cpp",
		"prefix": "cpp",
		"body": [
		  "#include <bits/stdc++.h>",
		  "#pragma GCC optimizer(\"Ofast\")",
		  "#pragma GCC target(\"avx2\")",
		  "using namespace std;",
		  "",
		  "typedef pair<int, int> ii;",
		  "typedef pair<long long, long long> ll;",
		  "typedef pair<double, double> dd;",
		  "typedef tuple<int, int, int> iii;",
		  "typedef tuple<long long, long long, long long> lll;",
		  "typedef tuple<double, double, double> ddd;",
		  "typedef vector<string> vs;",
		  "typedef vector<int> vi;",
		  "typedef vector<vector<int>> vvi;",
		  "typedef vector<long long> vl;",
		  "typedef vector<vector<long long>> vvl;",
		  "typedef vector<double> vd;",
		  "typedef vector<vector<double>> vvd;",
		  "typedef vector<ii> vii;",
		  "typedef vector<ll> vll;",
		  "typedef vector<dd> vdd;",
		  "",
		  "// Debug Snippets",
		  "",
		  "void __print(int x) { cerr << x; }",
		  "void __print(long x) { cerr << x; }",
		  "void __print(long long x) { cerr << x; }",
		  "void __print(unsigned x) { cerr << x; }",
		  "void __print(unsigned long x) { cerr << x; }",
		  "void __print(unsigned long long x) { cerr << x; }",
		  "void __print(float x) { cerr << x; }",
		  "void __print(double x) { cerr << x; }",
		  "void __print(long double x) { cerr << x; }",
		  "void __print(char x) { cerr << '\\'' << x << '\\''; }",
		  "void __print(const char* x) { cerr << '\\\"' << x << '\\\"'; }",
		  "void __print(const string& x) { cerr << '\\\"' << x << '\\\"'; }",
		  "void __print(bool x) { cerr << (x ? \"true\" : \"false\"); }",
		  "",
		  "template <typename T, typename V>",
		  "void __print(const pair<T, V>& x) {",
		  "    cerr << '{';",
		  "    __print(x.first);",
		  "    cerr << ',';",
		  "    __print(x.second);",
		  "    cerr << '}';",
		  "}",
		  "template <typename T>",
		  "void __print(const T& x) {",
		  "    int f = 0;",
		  "    cerr << '{';",
		  "    for (auto& i : x) cerr << (f++ ? \",\" : \"\"), __print(i);",
		  "    cerr << \"}\";",
		  "}",
		  "void _print() { cerr << \"]\\n\"; }",
		  "template <typename T, typename... V>",
		  "void _print(T t, V... v) {",
		  "    __print(t);",
		  "    if (sizeof...(v)) cerr << \", \";",
		  "    _print(v...);",
		  "}",
		  "",
		  "#define debug(x...)               \\",
		  "    cerr << \"[\" << #x << \"] = [\"; \\",
		  "    _print(x)",
		  "",
		  "template <class Ch, class Tr, class Container>",
		  "basic_ostream<Ch, Tr>& operator<<(basic_ostream<Ch, Tr>& os,",
		  "                                  Container const& x) {",
		  "    os << \"{ \";",
		  "    for (auto& y : x) os << y << \" \";",
		  "    return os << \"}\";",
		  "}",
		  "",
		  "template <class X, class Y>",
		  "ostream& operator<<(ostream& os, pair<X, Y> const& p) {",
		  "    return os << \"[ \" << p.first << \", \" << p.second << \"]\";",
		  "}",
		  "",
		  "// End Debug Snippets",
		  "",
		  "vs split(string line, regex re) {",
		  "    vs output;",
		  "    sregex_token_iterator it(line.begin(), line.end(), re, -1), it_end;",
		  "    while (it != it_end) {",
		  "        output.push_back(it->str());",
		  "        it++;",
		  "    }",
		  "    return output;",
		  "}",
		  "",
		  "const int INF_INT = 1e9 + 7;",
		  "const long long INF_LL = 1e18;",
		  "",
		  "int main() {",
		  "    ios::sync_with_stdio(false);",
		  "    cin.tie(0);",
		  "    $1",
		  "    return 0;",
		  "}"
		],
		"description": "C++ quick start"
	  },
}